#!/usr/bin/env python3

'''Глава 2. Ингредиенты Python: числа, строки и переменные'''

'''1. Сколько секунд содержится в часе? Используйте интерактивный интерпретатор как калькулятор и 
умножьте количество секунд в минуте (60) на количество минут в часе (тоже 60).'''

print(60 * 60)

print('\n================================ RESTART ================================\n')

'''2. Присвойте результат вычисления предыдущего задания (секунды в часе) переменной, 
которая называется seconds_per_hour.'''

seconds_per_hour = 60 * 60
print(seconds_per_hour)

print('\n================================ RESTART ================================\n')

'''3. Сколько секунд содержится в сутках? Используйте переменную seconds_per_hour.'''

print(seconds_per_hour * 24)

print('\n================================ RESTART ================================\n')

'''4. Снова посчитайте количество секунд в сутках, но на этот раз сохраните результат 
в переменной seconds_per_day.'''

seconds_per_day = seconds_per_hour * 24
print(seconds_per_day)

print('\n================================ RESTART ================================\n')

'''5. Разделите значение переменной seconds_per_day на значение переменной seconds_per_hour. 
Используйте деление с плавающей точкой (/).'''

print(seconds_per_day / seconds_per_hour)

print('\n================================ RESTART ================================\n')

'''6. Разделите значение переменной seconds_per_day на значение переменной seconds_per_hour. 
Используйте целочисленное деление (//). Совпадает ли полученный результат с ответом на предыдущее упражнение, 
если не учитывать символы .0 в конце?'''

print(seconds_per_day // seconds_per_hour)

print('\n================================ RESTART ================================\n')

'''Глава 3. Наполнение Python: списки, кортежи, словари и множества'''

'''1. Создайте список, который называется years_list, содержащий год, в который вы родились, 
и каждый последующий год вплоть до вашего пятого дня рождения.'''

years_list = [1979, 1980, 1981, 1982, 1983, 1984]
print(years_list)

print('\n================================ RESTART ================================\n')

'''2. В какой из годов, содержащихся в списке years_list, был ваш третий день рождения? 
Помните, в первый год вам было 0 лет.'''

print(years_list[3])

print('\n================================ RESTART ================================\n')

'''3. В какой из годов, содержащихся в списке years_list, вам было больше всего лет?
Вам нужно получить последний год, поэтому используйте смещение -1. Вы также можете использовать смещение 5, 
поскольку знаете, что в этом списке всего шесть элементов. Однако смещение -1 позволяет получить последний элемент 
из списка любой длины.'''

print(years_list[-1])

print('\n================================ RESTART ================================\n')

'''4. Создайте список things, содержащий три элемента: "mozzarella", "cinderella", "salmonella".'''

things = ["mozzarella", "cinderella", "salmonella"]
print(things)

print('\n================================ RESTART ================================\n')

'''5. Напишите с большой буквы тот элемент списка things, который относится к человеку, а затем выведите список. 
Изменился ли элемент списка?'''

print(things[1].capitalize())
print(things)

things[1] = things[1].capitalize()
print(things)

print('\n================================ RESTART ================================\n')

'''6. Переведите сырный элемент списка things в верхний регистр целиком и выведите список.'''

things[0] = things[0].upper()
print(things)

print('\n================================ RESTART ================================\n')

'''7. Удалите болезнь из списка things, получите Нобелевскую премию и затем выведите список на экран.'''

things.remove("salmonella")
print(things)

'''del things[-1]'''
'''del things[2]'''

print('\n================================ RESTART ================================\n')

'''8. Создайте список, который называется surprise и содержит элементы 'Groucho', 'Chico' и 'Harpo'.'''

surprise = ['Groucho', 'Chico', 'Harpo']
print(surprise)

print('\n================================ RESTART ================================\n')

'''9. Напишите последний элемент списка surprise со строчной буквы, затем обратите его 
и напишите с прописной буквы.'''

surprise[-1] = surprise[-1].lower()
surprise[-1] = surprise[-1][::-1]
print(surprise[-1].capitalize())

print('\n================================ RESTART ================================\n')

'''10. Создайте англо-французский словарь, который называется e2f, и выведите его на экран. 
Вот ваши первые слова: dog/chien, cat/chat и walrus/morse.'''

e2f = {'dog': 'chien', 'cat': 'chat', 'walrus': 'morse'}
print(e2f)

print('\n================================ RESTART ================================\n')

'''11. Используя словарь e2f, выведите французский вариант слова walrus.'''
print(e2f['walrus'])

print('\n================================ RESTART ================================\n')

'''12. Создайте французско-английский словарь f2e на основе словаря e2f. Используйте метод items.'''

f2e = {}
for english, french in e2f.items():
    f2e[french] = english
print(f2e)

print('\n================================ RESTART ================================\n')

'''13. Используя словарь f2e, выведите английский вариант слова chien.'''

print(f2e['chien'])

print('\n================================ RESTART ================================\n')

'''14. Создайте и выведите на экран множество английских слов из ключей словаря e2f.'''

print(set(e2f.keys()))

print('\n================================ RESTART ================================\n')

'''15. Создайте многоуровневый словарь life. Используйте следующие строки для ключей верхнего уровня: 
'animals', 'plants' и 'other'. Сделайте так, чтобы ключ 'animals' ссылался на другой словарь, 
имеющий ключи 'cats', 'octopi' и 'emus'. Сделайте так, чтобы ключ 'cats' ссылался на список строк 
со значениями 'Henri', 'Grumpy' и 'Lucy'. Остальные ключи должны ссылаться на пустые словари.'''

life = {
    'animals': {
        'cats': [
            'Henri', 'Grumpy', 'Lucy'
            ],
        'octopi': {},
        'emus': {}
        },
    'plants': {},
    'other': {}
    }
print(life)

print('\n================================ RESTART ================================\n')

'''16. Выведите на экран высокоуровневые ключи словаря life.'''

print(life.keys())
print(list(life.keys()))
print (list (life.keys()))

print('\n================================ RESTART ================================\n')

'''17. Выведите на экран ключи life['animals'].'''

print(life['animals'].keys())

print('\n================================ RESTART ================================\n')

'''18. Выведите значения life['animals']['cats'].'''

print(life['animals']['cats'])

print('\n================================ RESTART ================================\n')

'''Глава 4. Корочка Python: структуры кода'''

'''1. Присвойте значение 7 переменной guess_me. Далее напишите условные проверки (if, else и elif), 
чтобы вывести строку 'too low', если значение переменной guess_me меньше 7, 'too high', если оно больше 7, 
и 'just right', если равно 7.'''

guess_me = 7
if guess_me < 7:
    print('too low')
elif guess_me > 7:
    print('too high')
else:
    print('just right')

print('\n================================ RESTART ================================\n')

'''2. Присвойте значение 7 переменной guess_me и значение 1 переменной start. Напишите цикл while, 
который сравнивает переменные start и guess_me. Выведите строку 'too low', если значение переменной start 
меньше значения переменной guess_me. Если значение переменной start равно значению переменной guess_me, 
выведите строку 'found it!' и выйдите из цикла. Если значение переменной start больше значения переменной guess_me, 
выведите строку 'oops' и выйдите из цикла. Увеличьте значение переменной start на выходе из цикла.'''

guess_me = 7
start = 1
while True:
    if start < guess_me:
        print('too low')
    elif start == guess_me:
        print('found it!')
        break
    elif start > guess_me:
        print('oops')
        break
    start += 1

print('\n================================ RESTART ================================\n')

'''3. Используйте цикл for, чтобы вывести на экран значения списка [3, 2, 1, 0].'''

for value in [3, 2, 1, 0]:
    print(value)

print('\n================================ RESTART ================================\n')

'''4. Используйте включение списка, чтобы создать список, который содержит нечетные числа в диапазоне range(10).'''

even = [number for number in range(10) if number % 2 == 0]
print(even)

print('\n================================ RESTART ================================\n')

'''5. Используйте включение словаря, чтобы создать словарь squares. Используйте вызов range(10), 
чтобы получить ключи, и возведите их в квадрат, чтобы получить их значения.'''

squares = {key: key*key for key in range(10)}
print(squares)

print('\n================================ RESTART ================================\n')

'''6. Используйте включение множества, чтобы создать множество odd, которое содержит нечётные числа 
в диапазоне range(10).'''

odd = {number for number in range(10) if number % 2 == 1}
print(odd)

print('\n================================ RESTART ================================\n')

'''7. Используйте включение генератора, чтобы вернуть строку 'Got' и количество чисел в диапазоне range(10). 
Итерируйте по нему с помощью цикла for.'''

for thing in ('Got %s' % number for number in range(10)):
    print(thing)

print('\n================================ RESTART ================================\n')

'''8. Определите функцию good, которая возвращает список ['Harry', 'Ron', 'Hermione'].'''

def good():
    return ['Harry', 'Ron', 'Hermione']

print(good())

print('\n================================ RESTART ================================\n')

'''9. Определите функцию генератора get_odds, которая возвращает нечётные числа из диапазона range(10). 
Используйте цикл for, чтобы найти и вывести третье возвращенное значение.'''

def get_odds():
    for number in range(1, 10, 2):
        yield number

for count, number in enumerate(get_odds(), 1):
    if count == 3:
        print("The third odd number is", number)
        break

print('\n================================ RESTART ================================\n')

'''10. Определите декоратор test, который выводит строку 'start', когда вызывается функция, и строку 'end', 
когда функция завершает свою работу.'''

def test(func):
    def new_func(*args, **kwargs):
        print('start')
        result = func(*args, **kwargs)
        print('end')
        return result
    return new_func

@test
def greeting():
    print("Greetings, Earthling")

greeting()

print('\n================================ RESTART ================================\n')

'''11. Определите исключение, которое называется OopsException. Сгенерируйте его, чтобы увидеть, что произойдет. 
Затем напишите код, позволяющий поймать это исключение и вывести строку 'Caught an oops'.'''

class OopsException(Exception):
    pass
'''
raise OopsException()
'''
try:
    raise OopsException
except OopsException:
    print('Caught an oops')

print('\n================================ RESTART ================================\n')

'''12. Используйте функцию zip(), чтобы создать словарь movies, который объединяет в пары эти списки: 
titles = ['Creature of Habit', 'Crewel Fate'] и plots = ['A nun turns into a monster', 'A haunted yarn shop'].'''

titles = ['Creature of Habit', 'Crewel Fate']
plots = ['A nun turns into a monster', 'A haunted yarn shop']

movies = dict(zip(titles, plots))
print(movies)

