# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

ip_addr = input("Введите IP-адрес в формате <ip-address>/mask: ")
ip, mask_len = ip_addr.split('/')

print("\nNetwork:")
ip = ip.split(".")
bin_ip = "{0:08b}{1:08b}{2:08b}{3:08b}".format(int(ip[0]), int(ip[1]), int(ip[2]), int(ip[3]))
bin_net = bin_ip[:32 - (32 - int(mask_len))]
bin_net = str(bin_net) + (str("0")*(32 - int(mask_len)))
n = 8
bin_net = [bin_net[i:i+n] for i in range(0, len(bin_net), n)]
bin_net[0] = int(bin_net[0], base=2)
bin_net[1] = int(bin_net[1], base=2)
bin_net[2] = int(bin_net[2], base=2)
bin_net[3] = int(bin_net[3], base=2)
print('{:<10}' '{:<10}' '{:<10}' '{:<10}'.format(bin_net[0], bin_net[1], bin_net[2], bin_net[3]))
print('{:08b}''{}''{:08b}''{}''{:08b}''{}''{:08b}'.format(bin_net[0], "  ",
                                                          bin_net[1], "  ",
                                                          bin_net[2], "  ",
                                                          bin_net[3]))

print("\nMask:")
print("/", mask_len, sep="")
mask_len = int(mask_len)
mask = ''
for t in range(4):
    if mask_len > 7:
        mask += '255.'
    else:
        dec = 255 - (2 ** (8 - mask_len) - 1)
        mask += str(dec) + '.'
    mask_len -= 8
    if mask_len < 0:
        mask_len = 0

mask = mask.split(".")
print('{:<10}' '{:<10}' '{:<10}' '{:<10}'.format(mask[0], mask[1], mask[2], mask[3]))
print('{:08b}''{}''{:08b}''{}''{:08b}''{}''{:08b}'.format(int(mask[0]), "  ",
                                                          int(mask[1]), "  ",
                                                          int(mask[2]), "  ",
                                                          int(mask[3])))
