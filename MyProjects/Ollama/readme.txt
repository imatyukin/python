Документация для программы
1. Общее описание
Программа предназначена для поиска ответов на вопросы по загруженным документам (PDF, TXT, DOCX). Она использует векторное представление текста и модель машинного обучения для анализа контекста и генерации ответов.

Программа доступна в двух версиях:

Текстовая версия (main.py) : Управление через командную строку.
Графическая версия (main_gui.py) : Удобный графический интерфейс для взаимодействия.

2. Требования к системе
a) Зависимости
Установите необходимые библиотеки:
pip install langchain langchain_community sentence-transformers PyPDF2 python-docx PyQt5
b) Модель LLM
Программа использует модель deepseek-r1:32b через библиотеку langchain_ollama.
Убедитесь, что Ollama установлен и запущен на вашем компьютере:
Скачать Ollama (https://ollama.ai/?spm=5aebb161.23742189.0.0.60a3c921OJpiiO)
c) Поддерживаемые форматы файлов
PDF (.pdf)
Текстовые файлы (.txt)
Microsoft Word (.docx)

3. Использование текстовой версии (main.py)
a) Запуск программы
Запустите программу, указав пути к файлам:
python main.py file1.pdf file2.txt file3.docx
b) Взаимодействие с программой
После загрузки файлов программа будет готова принимать вопросы.
Введите вопрос в командной строке:
What do you want to learn from the document? (Type "exit" to quit)
How to configure BGP on Nokia routers?
Программа выведет ответ на основе загруженных документов.
c) Особенности
История запросов : Все вопросы и ответы сохраняются в файл history.txt.
Проверка наличия файлов : Если файл уже добавлен, он не будет загружен повторно.
Поддержка нескольких форматов : Программа автоматически определяет формат файла и загружает его.

4. Использование графической версии (main_gui.py)
a) Запуск программы
Запустите программу:
python main_gui.py
b) Интерфейс программы
Выбор файлов :
Нажмите кнопку "Выбрать файлы" , чтобы загрузить документы.
Поддерживаются форматы: .pdf, .txt, .docx.
Задать вопрос :
Введите вопрос в текстовое поле.
Нажмите кнопку "Получить ответ" .
Просмотр ответа :
Ответ отобразится в нижней части окна.
История запросов :
Нажмите кнопку "Показать историю" , чтобы увидеть все предыдущие вопросы и ответы.
Нажмите кнопку "Очистить историю" , чтобы удалить историю.
c) Особенности
Прогресс-бар : Показывает статус загрузки файлов и обработки запросов.
Анимация работы : Кнопка меняет текст на "Ищем ответ...", а прогресс-бар показывает активность.
Сохранение истории : Все запросы и ответы сохраняются в файл history.txt.

5. Структура проекта
a) Файлы проекта
main.py : Текстовая версия программы.
main_gui.py : Графическая версия программы.
vector_store/ : Папка для хранения векторного представления документов.
history.txt : Файл для сохранения истории запросов.
b) Основные функции
get_loader_for_file(file_path) : Выбирает загрузчик в зависимости от формата файла.
get_file_hash(file_path) : Вычисляет хэш файла для проверки наличия.
load_or_create_vector_store(file_paths) : Загружает или создаёт векторное хранилище.
answer_question(question) : Генерирует ответ на основе загруженных документов.
save_to_history(question, answer) : Сохраняет вопрос и ответ в файл истории.

6. Примеры использования
a) Текстовая версия
python main.py Quality_of_Service_Advanced_Configuration_Guide_for_Classic_CLI.pdf example.txt example.docx
b) Графическая версия
1. Запустите программу:
   ```bash
   python main_gui.py
