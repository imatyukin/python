Документация к программе Traffic Generator v2.0

Оглавление
1. Описание программы
2. Структура проекта
    - Файл main.py
    - Файл app.py
    - Файл generator.py
    - Файл utils.py
3. Настройки программы
    - Параметры трафика
    - Параметры QoS
    - Скорость генерации
4. Ограничения
    - Ограничения на Windows
    - Ограничения переменных
5. FAQ

Описание программы

Traffic Generator v2.0 — это программа для генерации сетевого трафика. Она позволяет:
 - Генерировать UDP и ICMP трафик.
 - Настраивать параметры трафика: тип (unicast, broadcast, multicast), IP-адреса, порты,
   размер пакета, скорость и QoS (DSCP, IP Precedence, ECN).
 - Визуализировать статистику в реальном времени (пакеты в секунду, мегабиты в секунду).
 - Сохранять и загружать конфигурации в формате YAML.

Программа имеет графический интерфейс, созданный с использованием библиотеки PyQt5, и
поддерживает асинхронные операции через qasync.

Структура проекта

traffic_generator/
│
├── __init__.py
├── app.py              # Основной файл с классом TrafficGeneratorApp
├── generator.py        # Файл с классом TrafficGenerator
├── utils.py            # Вспомогательные функции
└── main.py             # Точка входа в приложение

Файл main.py
Это точка входа в программу. Он отвечает за запуск графического интерфейса и настройку
асинхронного цикла событий.

Основные функции:
 - main(): Создает приложение PyQt, настраивает асинхронный цикл событий и запускает главное окно.

Файл app.py
Содержит класс TrafficGeneratorApp, который реализует графический интерфейс и логику
управления генератором трафика.

Основные функции:
- __init__(): Инициализирует интерфейс и переменные.
- initUI(): Создает элементы интерфейса (поля ввода, кнопки, графики).
- update_protocol(): Обновляет видимые поля в зависимости от выбранного протокола.
- start_traffic(): Запускает генерацию трафика.
- stop_traffic(): Останавливает генерацию трафика.
- update_stats(): Обновляет статистику и графики.
- save_config(): Сохраняет текущие настройки в YAML файл.
- load_config(): Загружает настройки из YAML файла.

Ключевые элементы интерфейса:
- Traffic Type: Выбор типа трафика (unicast, broadcast, multicast).
- Protocol: Выбор протокола (UDP, ICMP).
- Source IP: IP-адрес источника.
- Source Port: Порт источника (для UDP).
- Destination IP: IP-адрес назначения.
- Destination Port: Порт назначения (для UDP).
- Packet Size: Размер пакета (в байтах).
- Threads: Количество потоков для генерации трафика.
- Speed Mode: Режим скорости (kbps, mbps, pps, interval).
- Speed Value: Значение скорости.
- QoS: Настройки QoS (DSCP, IP Precedence, ECN).

Файл generator.py
Содержит класс TrafficGenerator, который отвечает за генерацию сетевого трафика.

Основные функции:
- __init__(): Инициализирует генератор с заданной конфигурацией.
- run(): Запускает генерацию трафика в отдельных потоках.
- send_packet(): Отправляет пакеты в зависимости от выбранного протокола.
- create_icmp_packet(): Создает ICMP пакет с учетом QoS.
- calculate_checksum(): Вычисляет контрольную сумму для пакетов.

Ключевые параметры:
- config: Конфигурация генератора (тип трафика, протокол, IP-адреса, порты, размер пакета, скорость, QoS).
- stats: Статистика (отправленные пакеты, ошибки, байты).
- running: Флаг, указывающий, работает ли генератор.

Файл utils.py
Содержит вспомогательные функции для валидации данных и расчета контрольной суммы.

Основные функции:
- validate_ip_address(): Проверяет корректность IP-адреса.
- validate_port(): Проверяет корректность порта.
- validate_packet_size(): Проверяет корректность размера пакета.
- validate_threads(): Проверяет корректность количества потоков.
- validate_range(): Проверяет, что значение находится в заданном диапазоне.
- calculate_checksum(): Вычисляет контрольную сумму для пакетов.

Настройки программы
Параметры трафика
- Traffic Type: unicast, broadcast, multicast.
- Protocol: UDP, ICMP.
- Source IP: IP-адрес источника (например, 192.168.1.1).
- Source Port: Порт источника (0-65535).
- Destination IP: IP-адрес назначения (например, 192.168.1.2).
- Destination Port: Порт назначения (0-65535).
- Packet Size: Размер пакета (1-65507 байт).
- Threads: Количество потоков (1-100).
  Параметры QoS
- DSCP: Differentiated Services Code Point (0-63).
- IP Precedence: Приоритет IP (0-7).
- ECN: Explicit Congestion Notification (0-3).
  Скорость генерации
- Speed Mode: kbps, mbps, pps, interval.
- Speed Value: Значение скорости (например, 10 для 10 Mbps).

Ограничения
Ограничения на Windows
- Для работы с raw-сокетами (ICMP) требуются права администратора.
- На Windows RAW-сокеты не позволяют задать ToS (DSCP) в IP-заголовке при создании собственного IP-заголовка.
- Некоторые сетевые интерфейсы могут не поддерживать multicast или broadcast.

Ограничения переменных
- IP-адреса: Должны быть валидными IPv4 адресами.
- Порты: Должны быть в диапазоне 0-65535.
- Размер пакета: Должен быть в диапазоне 1-65507 байт.
- Количество потоков: Должно быть в диапазоне 1-100.

FAQ
1. Как изменить IP-адрес источника?
- В поле Source IP введите IP-адрес источника. Если оставить значение 0.0.0.0, программа
автоматически выберет IP-адрес.

2. Почему не работает multicast?
- Убедитесь, что ваш сетевой интерфейс поддерживает multicast. Также проверьте, что вы указали
корректный групповой IP-адрес (например, 239.0.0.1).

3. Как изменить скорость генерации трафика?
- Выберите режим скорости (Speed Mode) и укажите значение (Speed Value). Например, для
скорости 10 Mbps выберите режим mbps и введите 10.

4. Почему графики не обновляются?
- Убедитесь, что генерация трафика запущена. Если трафик не генерируется, графики останутся пустыми.

5. Как добавить поддержку других протоколов?
- В текущей версии поддерживаются только UDP и ICMP. Для добавления новых протоколов
необходимо изменить код в файле generator.py.